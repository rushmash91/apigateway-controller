// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package method

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.APIKeyRequired, b.ko.Spec.APIKeyRequired) {
		delta.Add("Spec.APIKeyRequired", a.ko.Spec.APIKeyRequired, b.ko.Spec.APIKeyRequired)
	} else if a.ko.Spec.APIKeyRequired != nil && b.ko.Spec.APIKeyRequired != nil {
		if *a.ko.Spec.APIKeyRequired != *b.ko.Spec.APIKeyRequired {
			delta.Add("Spec.APIKeyRequired", a.ko.Spec.APIKeyRequired, b.ko.Spec.APIKeyRequired)
		}
	}
	if len(a.ko.Spec.AuthorizationScopes) != len(b.ko.Spec.AuthorizationScopes) {
		delta.Add("Spec.AuthorizationScopes", a.ko.Spec.AuthorizationScopes, b.ko.Spec.AuthorizationScopes)
	} else if len(a.ko.Spec.AuthorizationScopes) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.AuthorizationScopes, b.ko.Spec.AuthorizationScopes) {
			delta.Add("Spec.AuthorizationScopes", a.ko.Spec.AuthorizationScopes, b.ko.Spec.AuthorizationScopes)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AuthorizationType, b.ko.Spec.AuthorizationType) {
		delta.Add("Spec.AuthorizationType", a.ko.Spec.AuthorizationType, b.ko.Spec.AuthorizationType)
	} else if a.ko.Spec.AuthorizationType != nil && b.ko.Spec.AuthorizationType != nil {
		if *a.ko.Spec.AuthorizationType != *b.ko.Spec.AuthorizationType {
			delta.Add("Spec.AuthorizationType", a.ko.Spec.AuthorizationType, b.ko.Spec.AuthorizationType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AuthorizerID, b.ko.Spec.AuthorizerID) {
		delta.Add("Spec.AuthorizerID", a.ko.Spec.AuthorizerID, b.ko.Spec.AuthorizerID)
	} else if a.ko.Spec.AuthorizerID != nil && b.ko.Spec.AuthorizerID != nil {
		if *a.ko.Spec.AuthorizerID != *b.ko.Spec.AuthorizerID {
			delta.Add("Spec.AuthorizerID", a.ko.Spec.AuthorizerID, b.ko.Spec.AuthorizerID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.HTTPMethod, b.ko.Spec.HTTPMethod) {
		delta.Add("Spec.HTTPMethod", a.ko.Spec.HTTPMethod, b.ko.Spec.HTTPMethod)
	} else if a.ko.Spec.HTTPMethod != nil && b.ko.Spec.HTTPMethod != nil {
		if *a.ko.Spec.HTTPMethod != *b.ko.Spec.HTTPMethod {
			delta.Add("Spec.HTTPMethod", a.ko.Spec.HTTPMethod, b.ko.Spec.HTTPMethod)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.OperationName, b.ko.Spec.OperationName) {
		delta.Add("Spec.OperationName", a.ko.Spec.OperationName, b.ko.Spec.OperationName)
	} else if a.ko.Spec.OperationName != nil && b.ko.Spec.OperationName != nil {
		if *a.ko.Spec.OperationName != *b.ko.Spec.OperationName {
			delta.Add("Spec.OperationName", a.ko.Spec.OperationName, b.ko.Spec.OperationName)
		}
	}
	if len(a.ko.Spec.RequestModels) != len(b.ko.Spec.RequestModels) {
		delta.Add("Spec.RequestModels", a.ko.Spec.RequestModels, b.ko.Spec.RequestModels)
	} else if len(a.ko.Spec.RequestModels) > 0 {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.RequestModels, b.ko.Spec.RequestModels) {
			delta.Add("Spec.RequestModels", a.ko.Spec.RequestModels, b.ko.Spec.RequestModels)
		}
	}
	if len(a.ko.Spec.RequestParameters) != len(b.ko.Spec.RequestParameters) {
		delta.Add("Spec.RequestParameters", a.ko.Spec.RequestParameters, b.ko.Spec.RequestParameters)
	} else if len(a.ko.Spec.RequestParameters) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.RequestParameters, b.ko.Spec.RequestParameters) {
			delta.Add("Spec.RequestParameters", a.ko.Spec.RequestParameters, b.ko.Spec.RequestParameters)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RequestValidatorID, b.ko.Spec.RequestValidatorID) {
		delta.Add("Spec.RequestValidatorID", a.ko.Spec.RequestValidatorID, b.ko.Spec.RequestValidatorID)
	} else if a.ko.Spec.RequestValidatorID != nil && b.ko.Spec.RequestValidatorID != nil {
		if *a.ko.Spec.RequestValidatorID != *b.ko.Spec.RequestValidatorID {
			delta.Add("Spec.RequestValidatorID", a.ko.Spec.RequestValidatorID, b.ko.Spec.RequestValidatorID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResourceID, b.ko.Spec.ResourceID) {
		delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
	} else if a.ko.Spec.ResourceID != nil && b.ko.Spec.ResourceID != nil {
		if *a.ko.Spec.ResourceID != *b.ko.Spec.ResourceID {
			delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.ResourceRef, b.ko.Spec.ResourceRef) {
		delta.Add("Spec.ResourceRef", a.ko.Spec.ResourceRef, b.ko.Spec.ResourceRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID) {
		delta.Add("Spec.RestAPIID", a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID)
	} else if a.ko.Spec.RestAPIID != nil && b.ko.Spec.RestAPIID != nil {
		if *a.ko.Spec.RestAPIID != *b.ko.Spec.RestAPIID {
			delta.Add("Spec.RestAPIID", a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.RestAPIRef, b.ko.Spec.RestAPIRef) {
		delta.Add("Spec.RestAPIRef", a.ko.Spec.RestAPIRef, b.ko.Spec.RestAPIRef)
	}

	return delta
}
