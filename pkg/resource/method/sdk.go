// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package method

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/apigateway"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/apigateway-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Method{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetMethodOutput
	resp, err = rm.sdkapi.GetMethod(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetMethod", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.ApiKeyRequired != nil {
		ko.Spec.APIKeyRequired = resp.ApiKeyRequired
	} else {
		ko.Spec.APIKeyRequired = nil
	}
	if resp.AuthorizationScopes != nil {
		ko.Spec.AuthorizationScopes = aws.StringSlice(resp.AuthorizationScopes)
	} else {
		ko.Spec.AuthorizationScopes = nil
	}
	if resp.AuthorizationType != nil {
		ko.Spec.AuthorizationType = resp.AuthorizationType
	} else {
		ko.Spec.AuthorizationType = nil
	}
	if resp.AuthorizerId != nil {
		ko.Spec.AuthorizerID = resp.AuthorizerId
	} else {
		ko.Spec.AuthorizerID = nil
	}
	if resp.HttpMethod != nil {
		ko.Spec.HTTPMethod = resp.HttpMethod
	} else {
		ko.Spec.HTTPMethod = nil
	}
	if resp.MethodIntegration != nil {
		f5 := &svcapitypes.Integration_SDK{}
		if resp.MethodIntegration.CacheKeyParameters != nil {
			f5.CacheKeyParameters = aws.StringSlice(resp.MethodIntegration.CacheKeyParameters)
		}
		if resp.MethodIntegration.CacheNamespace != nil {
			f5.CacheNamespace = resp.MethodIntegration.CacheNamespace
		}
		if resp.MethodIntegration.ConnectionId != nil {
			f5.ConnectionID = resp.MethodIntegration.ConnectionId
		}
		if resp.MethodIntegration.ConnectionType != "" {
			f5.ConnectionType = aws.String(string(resp.MethodIntegration.ConnectionType))
		}
		if resp.MethodIntegration.ContentHandling != "" {
			f5.ContentHandling = aws.String(string(resp.MethodIntegration.ContentHandling))
		}
		if resp.MethodIntegration.Credentials != nil {
			f5.Credentials = resp.MethodIntegration.Credentials
		}
		if resp.MethodIntegration.HttpMethod != nil {
			f5.HTTPMethod = resp.MethodIntegration.HttpMethod
		}
		if resp.MethodIntegration.IntegrationResponses != nil {
			f5f7 := map[string]*svcapitypes.IntegrationResponse{}
			for f5f7key, f5f7valiter := range resp.MethodIntegration.IntegrationResponses {
				f5f7val := &svcapitypes.IntegrationResponse{}
				if f5f7valiter.ContentHandling != "" {
					f5f7val.ContentHandling = aws.String(string(f5f7valiter.ContentHandling))
				}
				if f5f7valiter.ResponseParameters != nil {
					f5f7val.ResponseParameters = aws.StringMap(f5f7valiter.ResponseParameters)
				}
				if f5f7valiter.ResponseTemplates != nil {
					f5f7val.ResponseTemplates = aws.StringMap(f5f7valiter.ResponseTemplates)
				}
				if f5f7valiter.SelectionPattern != nil {
					f5f7val.SelectionPattern = f5f7valiter.SelectionPattern
				}
				if f5f7valiter.StatusCode != nil {
					f5f7val.StatusCode = f5f7valiter.StatusCode
				}
				f5f7[f5f7key] = f5f7val
			}
			f5.IntegrationResponses = f5f7
		}
		if resp.MethodIntegration.PassthroughBehavior != nil {
			f5.PassthroughBehavior = resp.MethodIntegration.PassthroughBehavior
		}
		if resp.MethodIntegration.RequestParameters != nil {
			f5.RequestParameters = aws.StringMap(resp.MethodIntegration.RequestParameters)
		}
		if resp.MethodIntegration.RequestTemplates != nil {
			f5.RequestTemplates = aws.StringMap(resp.MethodIntegration.RequestTemplates)
		}
		timeoutInMillisCopy := int64(resp.MethodIntegration.TimeoutInMillis)
		f5.TimeoutInMillis = &timeoutInMillisCopy
		if resp.MethodIntegration.TlsConfig != nil {
			f5f12 := &svcapitypes.TLSConfig{}
			f5f12.InsecureSkipVerification = &resp.MethodIntegration.TlsConfig.InsecureSkipVerification
			f5.TLSConfig = f5f12
		}
		if resp.MethodIntegration.Type != "" {
			f5.Type = aws.String(string(resp.MethodIntegration.Type))
		}
		if resp.MethodIntegration.Uri != nil {
			f5.URI = resp.MethodIntegration.Uri
		}
		ko.Status.MethodIntegration = f5
	} else {
		ko.Status.MethodIntegration = nil
	}
	if resp.MethodResponses != nil {
		f6 := map[string]*svcapitypes.MethodResponse{}
		for f6key, f6valiter := range resp.MethodResponses {
			f6val := &svcapitypes.MethodResponse{}
			if f6valiter.ResponseModels != nil {
				f6val.ResponseModels = aws.StringMap(f6valiter.ResponseModels)
			}
			if f6valiter.ResponseParameters != nil {
				f6val.ResponseParameters = aws.BoolMap(f6valiter.ResponseParameters)
			}
			if f6valiter.StatusCode != nil {
				f6val.StatusCode = f6valiter.StatusCode
			}
			f6[f6key] = f6val
		}
		ko.Status.MethodResponses = f6
	} else {
		ko.Status.MethodResponses = nil
	}
	if resp.OperationName != nil {
		ko.Spec.OperationName = resp.OperationName
	} else {
		ko.Spec.OperationName = nil
	}
	if resp.RequestModels != nil {
		ko.Spec.RequestModels = aws.StringMap(resp.RequestModels)
	} else {
		ko.Spec.RequestModels = nil
	}
	if resp.RequestParameters != nil {
		ko.Spec.RequestParameters = aws.BoolMap(resp.RequestParameters)
	} else {
		ko.Spec.RequestParameters = nil
	}
	if resp.RequestValidatorId != nil {
		ko.Spec.RequestValidatorID = resp.RequestValidatorId
	} else {
		ko.Spec.RequestValidatorID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.HTTPMethod == nil || r.ko.Spec.ResourceID == nil || r.ko.Spec.RestAPIID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetMethodInput, error) {
	res := &svcsdk.GetMethodInput{}

	if r.ko.Spec.HTTPMethod != nil {
		res.HttpMethod = r.ko.Spec.HTTPMethod
	}
	if r.ko.Spec.ResourceID != nil {
		res.ResourceId = r.ko.Spec.ResourceID
	}
	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.PutMethodOutput
	_ = resp
	resp, err = rm.sdkapi.PutMethod(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "PutMethod", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.ApiKeyRequired != nil {
		ko.Spec.APIKeyRequired = resp.ApiKeyRequired
	} else {
		ko.Spec.APIKeyRequired = nil
	}
	if resp.AuthorizationScopes != nil {
		ko.Spec.AuthorizationScopes = aws.StringSlice(resp.AuthorizationScopes)
	} else {
		ko.Spec.AuthorizationScopes = nil
	}
	if resp.AuthorizationType != nil {
		ko.Spec.AuthorizationType = resp.AuthorizationType
	} else {
		ko.Spec.AuthorizationType = nil
	}
	if resp.AuthorizerId != nil {
		ko.Spec.AuthorizerID = resp.AuthorizerId
	} else {
		ko.Spec.AuthorizerID = nil
	}
	if resp.HttpMethod != nil {
		ko.Spec.HTTPMethod = resp.HttpMethod
	} else {
		ko.Spec.HTTPMethod = nil
	}
	if resp.MethodIntegration != nil {
		f5 := &svcapitypes.Integration_SDK{}
		if resp.MethodIntegration.CacheKeyParameters != nil {
			f5.CacheKeyParameters = aws.StringSlice(resp.MethodIntegration.CacheKeyParameters)
		}
		if resp.MethodIntegration.CacheNamespace != nil {
			f5.CacheNamespace = resp.MethodIntegration.CacheNamespace
		}
		if resp.MethodIntegration.ConnectionId != nil {
			f5.ConnectionID = resp.MethodIntegration.ConnectionId
		}
		if resp.MethodIntegration.ConnectionType != "" {
			f5.ConnectionType = aws.String(string(resp.MethodIntegration.ConnectionType))
		}
		if resp.MethodIntegration.ContentHandling != "" {
			f5.ContentHandling = aws.String(string(resp.MethodIntegration.ContentHandling))
		}
		if resp.MethodIntegration.Credentials != nil {
			f5.Credentials = resp.MethodIntegration.Credentials
		}
		if resp.MethodIntegration.HttpMethod != nil {
			f5.HTTPMethod = resp.MethodIntegration.HttpMethod
		}
		if resp.MethodIntegration.IntegrationResponses != nil {
			f5f7 := map[string]*svcapitypes.IntegrationResponse{}
			for f5f7key, f5f7valiter := range resp.MethodIntegration.IntegrationResponses {
				f5f7val := &svcapitypes.IntegrationResponse{}
				if f5f7valiter.ContentHandling != "" {
					f5f7val.ContentHandling = aws.String(string(f5f7valiter.ContentHandling))
				}
				if f5f7valiter.ResponseParameters != nil {
					f5f7val.ResponseParameters = aws.StringMap(f5f7valiter.ResponseParameters)
				}
				if f5f7valiter.ResponseTemplates != nil {
					f5f7val.ResponseTemplates = aws.StringMap(f5f7valiter.ResponseTemplates)
				}
				if f5f7valiter.SelectionPattern != nil {
					f5f7val.SelectionPattern = f5f7valiter.SelectionPattern
				}
				if f5f7valiter.StatusCode != nil {
					f5f7val.StatusCode = f5f7valiter.StatusCode
				}
				f5f7[f5f7key] = f5f7val
			}
			f5.IntegrationResponses = f5f7
		}
		if resp.MethodIntegration.PassthroughBehavior != nil {
			f5.PassthroughBehavior = resp.MethodIntegration.PassthroughBehavior
		}
		if resp.MethodIntegration.RequestParameters != nil {
			f5.RequestParameters = aws.StringMap(resp.MethodIntegration.RequestParameters)
		}
		if resp.MethodIntegration.RequestTemplates != nil {
			f5.RequestTemplates = aws.StringMap(resp.MethodIntegration.RequestTemplates)
		}
		timeoutInMillisCopy := int64(resp.MethodIntegration.TimeoutInMillis)
		f5.TimeoutInMillis = &timeoutInMillisCopy
		if resp.MethodIntegration.TlsConfig != nil {
			f5f12 := &svcapitypes.TLSConfig{}
			f5f12.InsecureSkipVerification = &resp.MethodIntegration.TlsConfig.InsecureSkipVerification
			f5.TLSConfig = f5f12
		}
		if resp.MethodIntegration.Type != "" {
			f5.Type = aws.String(string(resp.MethodIntegration.Type))
		}
		if resp.MethodIntegration.Uri != nil {
			f5.URI = resp.MethodIntegration.Uri
		}
		ko.Status.MethodIntegration = f5
	} else {
		ko.Status.MethodIntegration = nil
	}
	if resp.MethodResponses != nil {
		f6 := map[string]*svcapitypes.MethodResponse{}
		for f6key, f6valiter := range resp.MethodResponses {
			f6val := &svcapitypes.MethodResponse{}
			if f6valiter.ResponseModels != nil {
				f6val.ResponseModels = aws.StringMap(f6valiter.ResponseModels)
			}
			if f6valiter.ResponseParameters != nil {
				f6val.ResponseParameters = aws.BoolMap(f6valiter.ResponseParameters)
			}
			if f6valiter.StatusCode != nil {
				f6val.StatusCode = f6valiter.StatusCode
			}
			f6[f6key] = f6val
		}
		ko.Status.MethodResponses = f6
	} else {
		ko.Status.MethodResponses = nil
	}
	if resp.OperationName != nil {
		ko.Spec.OperationName = resp.OperationName
	} else {
		ko.Spec.OperationName = nil
	}
	if resp.RequestModels != nil {
		ko.Spec.RequestModels = aws.StringMap(resp.RequestModels)
	} else {
		ko.Spec.RequestModels = nil
	}
	if resp.RequestParameters != nil {
		ko.Spec.RequestParameters = aws.BoolMap(resp.RequestParameters)
	} else {
		ko.Spec.RequestParameters = nil
	}
	if resp.RequestValidatorId != nil {
		ko.Spec.RequestValidatorID = resp.RequestValidatorId
	} else {
		ko.Spec.RequestValidatorID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.PutMethodInput, error) {
	res := &svcsdk.PutMethodInput{}

	if r.ko.Spec.APIKeyRequired != nil {
		res.ApiKeyRequired = *r.ko.Spec.APIKeyRequired
	}
	if r.ko.Spec.AuthorizationScopes != nil {
		res.AuthorizationScopes = aws.ToStringSlice(r.ko.Spec.AuthorizationScopes)
	}
	if r.ko.Spec.AuthorizationType != nil {
		res.AuthorizationType = r.ko.Spec.AuthorizationType
	}
	if r.ko.Spec.AuthorizerID != nil {
		res.AuthorizerId = r.ko.Spec.AuthorizerID
	}
	if r.ko.Spec.HTTPMethod != nil {
		res.HttpMethod = r.ko.Spec.HTTPMethod
	}
	if r.ko.Spec.OperationName != nil {
		res.OperationName = r.ko.Spec.OperationName
	}
	if r.ko.Spec.RequestModels != nil {
		res.RequestModels = aws.ToStringMap(r.ko.Spec.RequestModels)
	}
	if r.ko.Spec.RequestParameters != nil {
		res.RequestParameters = aws.ToBoolMap(r.ko.Spec.RequestParameters)
	}
	if r.ko.Spec.RequestValidatorID != nil {
		res.RequestValidatorId = r.ko.Spec.RequestValidatorID
	}
	if r.ko.Spec.ResourceID != nil {
		res.ResourceId = r.ko.Spec.ResourceID
	}
	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	updateMethodInput(desired, latest, input, delta)

	var resp *svcsdk.UpdateMethodOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateMethod(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateMethod", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.ApiKeyRequired != nil {
		ko.Spec.APIKeyRequired = resp.ApiKeyRequired
	} else {
		ko.Spec.APIKeyRequired = nil
	}
	if resp.AuthorizationScopes != nil {
		ko.Spec.AuthorizationScopes = aws.StringSlice(resp.AuthorizationScopes)
	} else {
		ko.Spec.AuthorizationScopes = nil
	}
	if resp.AuthorizationType != nil {
		ko.Spec.AuthorizationType = resp.AuthorizationType
	} else {
		ko.Spec.AuthorizationType = nil
	}
	if resp.AuthorizerId != nil {
		ko.Spec.AuthorizerID = resp.AuthorizerId
	} else {
		ko.Spec.AuthorizerID = nil
	}
	if resp.HttpMethod != nil {
		ko.Spec.HTTPMethod = resp.HttpMethod
	} else {
		ko.Spec.HTTPMethod = nil
	}
	if resp.MethodIntegration != nil {
		f5 := &svcapitypes.Integration_SDK{}
		if resp.MethodIntegration.CacheKeyParameters != nil {
			f5.CacheKeyParameters = aws.StringSlice(resp.MethodIntegration.CacheKeyParameters)
		}
		if resp.MethodIntegration.CacheNamespace != nil {
			f5.CacheNamespace = resp.MethodIntegration.CacheNamespace
		}
		if resp.MethodIntegration.ConnectionId != nil {
			f5.ConnectionID = resp.MethodIntegration.ConnectionId
		}
		if resp.MethodIntegration.ConnectionType != "" {
			f5.ConnectionType = aws.String(string(resp.MethodIntegration.ConnectionType))
		}
		if resp.MethodIntegration.ContentHandling != "" {
			f5.ContentHandling = aws.String(string(resp.MethodIntegration.ContentHandling))
		}
		if resp.MethodIntegration.Credentials != nil {
			f5.Credentials = resp.MethodIntegration.Credentials
		}
		if resp.MethodIntegration.HttpMethod != nil {
			f5.HTTPMethod = resp.MethodIntegration.HttpMethod
		}
		if resp.MethodIntegration.IntegrationResponses != nil {
			f5f7 := map[string]*svcapitypes.IntegrationResponse{}
			for f5f7key, f5f7valiter := range resp.MethodIntegration.IntegrationResponses {
				f5f7val := &svcapitypes.IntegrationResponse{}
				if f5f7valiter.ContentHandling != "" {
					f5f7val.ContentHandling = aws.String(string(f5f7valiter.ContentHandling))
				}
				if f5f7valiter.ResponseParameters != nil {
					f5f7val.ResponseParameters = aws.StringMap(f5f7valiter.ResponseParameters)
				}
				if f5f7valiter.ResponseTemplates != nil {
					f5f7val.ResponseTemplates = aws.StringMap(f5f7valiter.ResponseTemplates)
				}
				if f5f7valiter.SelectionPattern != nil {
					f5f7val.SelectionPattern = f5f7valiter.SelectionPattern
				}
				if f5f7valiter.StatusCode != nil {
					f5f7val.StatusCode = f5f7valiter.StatusCode
				}
				f5f7[f5f7key] = f5f7val
			}
			f5.IntegrationResponses = f5f7
		}
		if resp.MethodIntegration.PassthroughBehavior != nil {
			f5.PassthroughBehavior = resp.MethodIntegration.PassthroughBehavior
		}
		if resp.MethodIntegration.RequestParameters != nil {
			f5.RequestParameters = aws.StringMap(resp.MethodIntegration.RequestParameters)
		}
		if resp.MethodIntegration.RequestTemplates != nil {
			f5.RequestTemplates = aws.StringMap(resp.MethodIntegration.RequestTemplates)
		}
		timeoutInMillisCopy := int64(resp.MethodIntegration.TimeoutInMillis)
		f5.TimeoutInMillis = &timeoutInMillisCopy
		if resp.MethodIntegration.TlsConfig != nil {
			f5f12 := &svcapitypes.TLSConfig{}
			f5f12.InsecureSkipVerification = &resp.MethodIntegration.TlsConfig.InsecureSkipVerification
			f5.TLSConfig = f5f12
		}
		if resp.MethodIntegration.Type != "" {
			f5.Type = aws.String(string(resp.MethodIntegration.Type))
		}
		if resp.MethodIntegration.Uri != nil {
			f5.URI = resp.MethodIntegration.Uri
		}
		ko.Status.MethodIntegration = f5
	} else {
		ko.Status.MethodIntegration = nil
	}
	if resp.MethodResponses != nil {
		f6 := map[string]*svcapitypes.MethodResponse{}
		for f6key, f6valiter := range resp.MethodResponses {
			f6val := &svcapitypes.MethodResponse{}
			if f6valiter.ResponseModels != nil {
				f6val.ResponseModels = aws.StringMap(f6valiter.ResponseModels)
			}
			if f6valiter.ResponseParameters != nil {
				f6val.ResponseParameters = aws.BoolMap(f6valiter.ResponseParameters)
			}
			if f6valiter.StatusCode != nil {
				f6val.StatusCode = f6valiter.StatusCode
			}
			f6[f6key] = f6val
		}
		ko.Status.MethodResponses = f6
	} else {
		ko.Status.MethodResponses = nil
	}
	if resp.OperationName != nil {
		ko.Spec.OperationName = resp.OperationName
	} else {
		ko.Spec.OperationName = nil
	}
	if resp.RequestModels != nil {
		ko.Spec.RequestModels = aws.StringMap(resp.RequestModels)
	} else {
		ko.Spec.RequestModels = nil
	}
	if resp.RequestParameters != nil {
		ko.Spec.RequestParameters = aws.BoolMap(resp.RequestParameters)
	} else {
		ko.Spec.RequestParameters = nil
	}
	if resp.RequestValidatorId != nil {
		ko.Spec.RequestValidatorID = resp.RequestValidatorId
	} else {
		ko.Spec.RequestValidatorID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateMethodInput, error) {
	res := &svcsdk.UpdateMethodInput{}

	if r.ko.Spec.HTTPMethod != nil {
		res.HttpMethod = r.ko.Spec.HTTPMethod
	}
	if r.ko.Spec.ResourceID != nil {
		res.ResourceId = r.ko.Spec.ResourceID
	}
	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteMethodOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteMethod(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteMethod", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteMethodInput, error) {
	res := &svcsdk.DeleteMethodInput{}

	if r.ko.Spec.HTTPMethod != nil {
		res.HttpMethod = r.ko.Spec.HTTPMethod
	}
	if r.ko.Spec.ResourceID != nil {
		res.ResourceId = r.ko.Spec.ResourceID
	}
	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Method,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameter":
		return true
	default:
		return false
	}
}
