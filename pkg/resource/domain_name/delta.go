// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package domain_name

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.CertificateARN, b.ko.Spec.CertificateARN) {
		delta.Add("Spec.CertificateARN", a.ko.Spec.CertificateARN, b.ko.Spec.CertificateARN)
	} else if a.ko.Spec.CertificateARN != nil && b.ko.Spec.CertificateARN != nil {
		if *a.ko.Spec.CertificateARN != *b.ko.Spec.CertificateARN {
			delta.Add("Spec.CertificateARN", a.ko.Spec.CertificateARN, b.ko.Spec.CertificateARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CertificateBody, b.ko.Spec.CertificateBody) {
		delta.Add("Spec.CertificateBody", a.ko.Spec.CertificateBody, b.ko.Spec.CertificateBody)
	} else if a.ko.Spec.CertificateBody != nil && b.ko.Spec.CertificateBody != nil {
		if *a.ko.Spec.CertificateBody != *b.ko.Spec.CertificateBody {
			delta.Add("Spec.CertificateBody", a.ko.Spec.CertificateBody, b.ko.Spec.CertificateBody)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CertificateChain, b.ko.Spec.CertificateChain) {
		delta.Add("Spec.CertificateChain", a.ko.Spec.CertificateChain, b.ko.Spec.CertificateChain)
	} else if a.ko.Spec.CertificateChain != nil && b.ko.Spec.CertificateChain != nil {
		if *a.ko.Spec.CertificateChain != *b.ko.Spec.CertificateChain {
			delta.Add("Spec.CertificateChain", a.ko.Spec.CertificateChain, b.ko.Spec.CertificateChain)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CertificateName, b.ko.Spec.CertificateName) {
		delta.Add("Spec.CertificateName", a.ko.Spec.CertificateName, b.ko.Spec.CertificateName)
	} else if a.ko.Spec.CertificateName != nil && b.ko.Spec.CertificateName != nil {
		if *a.ko.Spec.CertificateName != *b.ko.Spec.CertificateName {
			delta.Add("Spec.CertificateName", a.ko.Spec.CertificateName, b.ko.Spec.CertificateName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CertificatePrivateKey, b.ko.Spec.CertificatePrivateKey) {
		delta.Add("Spec.CertificatePrivateKey", a.ko.Spec.CertificatePrivateKey, b.ko.Spec.CertificatePrivateKey)
	} else if a.ko.Spec.CertificatePrivateKey != nil && b.ko.Spec.CertificatePrivateKey != nil {
		if *a.ko.Spec.CertificatePrivateKey != *b.ko.Spec.CertificatePrivateKey {
			delta.Add("Spec.CertificatePrivateKey", a.ko.Spec.CertificatePrivateKey, b.ko.Spec.CertificatePrivateKey)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DomainName, b.ko.Spec.DomainName) {
		delta.Add("Spec.DomainName", a.ko.Spec.DomainName, b.ko.Spec.DomainName)
	} else if a.ko.Spec.DomainName != nil && b.ko.Spec.DomainName != nil {
		if *a.ko.Spec.DomainName != *b.ko.Spec.DomainName {
			delta.Add("Spec.DomainName", a.ko.Spec.DomainName, b.ko.Spec.DomainName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EndpointConfiguration, b.ko.Spec.EndpointConfiguration) {
		delta.Add("Spec.EndpointConfiguration", a.ko.Spec.EndpointConfiguration, b.ko.Spec.EndpointConfiguration)
	} else if a.ko.Spec.EndpointConfiguration != nil && b.ko.Spec.EndpointConfiguration != nil {
		if len(a.ko.Spec.EndpointConfiguration.Types) != len(b.ko.Spec.EndpointConfiguration.Types) {
			delta.Add("Spec.EndpointConfiguration.Types", a.ko.Spec.EndpointConfiguration.Types, b.ko.Spec.EndpointConfiguration.Types)
		} else if len(a.ko.Spec.EndpointConfiguration.Types) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.EndpointConfiguration.Types, b.ko.Spec.EndpointConfiguration.Types) {
				delta.Add("Spec.EndpointConfiguration.Types", a.ko.Spec.EndpointConfiguration.Types, b.ko.Spec.EndpointConfiguration.Types)
			}
		}
		if len(a.ko.Spec.EndpointConfiguration.VPCEndpointIDs) != len(b.ko.Spec.EndpointConfiguration.VPCEndpointIDs) {
			delta.Add("Spec.EndpointConfiguration.VPCEndpointIDs", a.ko.Spec.EndpointConfiguration.VPCEndpointIDs, b.ko.Spec.EndpointConfiguration.VPCEndpointIDs)
		} else if len(a.ko.Spec.EndpointConfiguration.VPCEndpointIDs) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.EndpointConfiguration.VPCEndpointIDs, b.ko.Spec.EndpointConfiguration.VPCEndpointIDs) {
				delta.Add("Spec.EndpointConfiguration.VPCEndpointIDs", a.ko.Spec.EndpointConfiguration.VPCEndpointIDs, b.ko.Spec.EndpointConfiguration.VPCEndpointIDs)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MutualTLSAuthentication, b.ko.Spec.MutualTLSAuthentication) {
		delta.Add("Spec.MutualTLSAuthentication", a.ko.Spec.MutualTLSAuthentication, b.ko.Spec.MutualTLSAuthentication)
	} else if a.ko.Spec.MutualTLSAuthentication != nil && b.ko.Spec.MutualTLSAuthentication != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.MutualTLSAuthentication.TruststoreURI, b.ko.Spec.MutualTLSAuthentication.TruststoreURI) {
			delta.Add("Spec.MutualTLSAuthentication.TruststoreURI", a.ko.Spec.MutualTLSAuthentication.TruststoreURI, b.ko.Spec.MutualTLSAuthentication.TruststoreURI)
		} else if a.ko.Spec.MutualTLSAuthentication.TruststoreURI != nil && b.ko.Spec.MutualTLSAuthentication.TruststoreURI != nil {
			if *a.ko.Spec.MutualTLSAuthentication.TruststoreURI != *b.ko.Spec.MutualTLSAuthentication.TruststoreURI {
				delta.Add("Spec.MutualTLSAuthentication.TruststoreURI", a.ko.Spec.MutualTLSAuthentication.TruststoreURI, b.ko.Spec.MutualTLSAuthentication.TruststoreURI)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MutualTLSAuthentication.TruststoreVersion, b.ko.Spec.MutualTLSAuthentication.TruststoreVersion) {
			delta.Add("Spec.MutualTLSAuthentication.TruststoreVersion", a.ko.Spec.MutualTLSAuthentication.TruststoreVersion, b.ko.Spec.MutualTLSAuthentication.TruststoreVersion)
		} else if a.ko.Spec.MutualTLSAuthentication.TruststoreVersion != nil && b.ko.Spec.MutualTLSAuthentication.TruststoreVersion != nil {
			if *a.ko.Spec.MutualTLSAuthentication.TruststoreVersion != *b.ko.Spec.MutualTLSAuthentication.TruststoreVersion {
				delta.Add("Spec.MutualTLSAuthentication.TruststoreVersion", a.ko.Spec.MutualTLSAuthentication.TruststoreVersion, b.ko.Spec.MutualTLSAuthentication.TruststoreVersion)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.OwnershipVerificationCertificateARN, b.ko.Spec.OwnershipVerificationCertificateARN) {
		delta.Add("Spec.OwnershipVerificationCertificateARN", a.ko.Spec.OwnershipVerificationCertificateARN, b.ko.Spec.OwnershipVerificationCertificateARN)
	} else if a.ko.Spec.OwnershipVerificationCertificateARN != nil && b.ko.Spec.OwnershipVerificationCertificateARN != nil {
		if *a.ko.Spec.OwnershipVerificationCertificateARN != *b.ko.Spec.OwnershipVerificationCertificateARN {
			delta.Add("Spec.OwnershipVerificationCertificateARN", a.ko.Spec.OwnershipVerificationCertificateARN, b.ko.Spec.OwnershipVerificationCertificateARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Policy, b.ko.Spec.Policy) {
		delta.Add("Spec.Policy", a.ko.Spec.Policy, b.ko.Spec.Policy)
	} else if a.ko.Spec.Policy != nil && b.ko.Spec.Policy != nil {
		if *a.ko.Spec.Policy != *b.ko.Spec.Policy {
			delta.Add("Spec.Policy", a.ko.Spec.Policy, b.ko.Spec.Policy)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RegionalCertificateARN, b.ko.Spec.RegionalCertificateARN) {
		delta.Add("Spec.RegionalCertificateARN", a.ko.Spec.RegionalCertificateARN, b.ko.Spec.RegionalCertificateARN)
	} else if a.ko.Spec.RegionalCertificateARN != nil && b.ko.Spec.RegionalCertificateARN != nil {
		if *a.ko.Spec.RegionalCertificateARN != *b.ko.Spec.RegionalCertificateARN {
			delta.Add("Spec.RegionalCertificateARN", a.ko.Spec.RegionalCertificateARN, b.ko.Spec.RegionalCertificateARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RegionalCertificateName, b.ko.Spec.RegionalCertificateName) {
		delta.Add("Spec.RegionalCertificateName", a.ko.Spec.RegionalCertificateName, b.ko.Spec.RegionalCertificateName)
	} else if a.ko.Spec.RegionalCertificateName != nil && b.ko.Spec.RegionalCertificateName != nil {
		if *a.ko.Spec.RegionalCertificateName != *b.ko.Spec.RegionalCertificateName {
			delta.Add("Spec.RegionalCertificateName", a.ko.Spec.RegionalCertificateName, b.ko.Spec.RegionalCertificateName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SecurityPolicy, b.ko.Spec.SecurityPolicy) {
		delta.Add("Spec.SecurityPolicy", a.ko.Spec.SecurityPolicy, b.ko.Spec.SecurityPolicy)
	} else if a.ko.Spec.SecurityPolicy != nil && b.ko.Spec.SecurityPolicy != nil {
		if *a.ko.Spec.SecurityPolicy != *b.ko.Spec.SecurityPolicy {
			delta.Add("Spec.SecurityPolicy", a.ko.Spec.SecurityPolicy, b.ko.Spec.SecurityPolicy)
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
