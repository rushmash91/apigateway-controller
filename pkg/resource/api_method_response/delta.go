// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package api_method_response

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.HTTPMethod, b.ko.Spec.HTTPMethod) {
		delta.Add("Spec.HTTPMethod", a.ko.Spec.HTTPMethod, b.ko.Spec.HTTPMethod)
	} else if a.ko.Spec.HTTPMethod != nil && b.ko.Spec.HTTPMethod != nil {
		if *a.ko.Spec.HTTPMethod != *b.ko.Spec.HTTPMethod {
			delta.Add("Spec.HTTPMethod", a.ko.Spec.HTTPMethod, b.ko.Spec.HTTPMethod)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResourceID, b.ko.Spec.ResourceID) {
		delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
	} else if a.ko.Spec.ResourceID != nil && b.ko.Spec.ResourceID != nil {
		if *a.ko.Spec.ResourceID != *b.ko.Spec.ResourceID {
			delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.ResourceRef, b.ko.Spec.ResourceRef) {
		delta.Add("Spec.ResourceRef", a.ko.Spec.ResourceRef, b.ko.Spec.ResourceRef)
	}
	if len(a.ko.Spec.ResponseModels) != len(b.ko.Spec.ResponseModels) {
		delta.Add("Spec.ResponseModels", a.ko.Spec.ResponseModels, b.ko.Spec.ResponseModels)
	} else if len(a.ko.Spec.ResponseModels) > 0 {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.ResponseModels, b.ko.Spec.ResponseModels) {
			delta.Add("Spec.ResponseModels", a.ko.Spec.ResponseModels, b.ko.Spec.ResponseModels)
		}
	}
	if len(a.ko.Spec.ResponseParameters) != len(b.ko.Spec.ResponseParameters) {
		delta.Add("Spec.ResponseParameters", a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters)
	} else if len(a.ko.Spec.ResponseParameters) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters) {
			delta.Add("Spec.ResponseParameters", a.ko.Spec.ResponseParameters, b.ko.Spec.ResponseParameters)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID) {
		delta.Add("Spec.RestAPIID", a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID)
	} else if a.ko.Spec.RestAPIID != nil && b.ko.Spec.RestAPIID != nil {
		if *a.ko.Spec.RestAPIID != *b.ko.Spec.RestAPIID {
			delta.Add("Spec.RestAPIID", a.ko.Spec.RestAPIID, b.ko.Spec.RestAPIID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.RestAPIRef, b.ko.Spec.RestAPIRef) {
		delta.Add("Spec.RestAPIRef", a.ko.Spec.RestAPIRef, b.ko.Spec.RestAPIRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.StatusCode, b.ko.Spec.StatusCode) {
		delta.Add("Spec.StatusCode", a.ko.Spec.StatusCode, b.ko.Spec.StatusCode)
	} else if a.ko.Spec.StatusCode != nil && b.ko.Spec.StatusCode != nil {
		if *a.ko.Spec.StatusCode != *b.ko.Spec.StatusCode {
			delta.Add("Spec.StatusCode", a.ko.Spec.StatusCode, b.ko.Spec.StatusCode)
		}
	}

	return delta
}
