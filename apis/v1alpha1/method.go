// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MethodSpec defines the desired state of Method.
//
// Represents a client-facing interface by which the client calls the API to
// access back-end resources. A Method resource is integrated with an Integration
// resource. Both consist of a request and one or more responses. The method
// request takes the client input that is passed to the back end through the
// integration request. A method response returns the output from the back end
// to the client through an integration response. A method request is embodied
// in a Method resource, whereas an integration request is embodied in an Integration
// resource. On the other hand, a method response is represented by a MethodResponse
// resource, whereas an integration response is represented by an IntegrationResponse
// resource.
type MethodSpec struct {

	// Specifies whether the method required a valid ApiKey.
	APIKeyRequired *bool `json:"apiKeyRequired,omitempty"`
	// A list of authorization scopes configured on the method. The scopes are used
	// with a COGNITO_USER_POOLS authorizer to authorize the method invocation.
	// The authorization works by matching the method scopes against the scopes
	// parsed from the access token in the incoming request. The method invocation
	// is authorized if any method scopes matches a claimed scope in the access
	// token. Otherwise, the invocation is not authorized. When the method scope
	// is configured, the client must provide an access token instead of an identity
	// token for authorization purposes.
	AuthorizationScopes []*string `json:"authorizationScopes,omitempty"`
	// The method's authorization type. Valid values are NONE for open access, AWS_IAM
	// for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS
	// for using a Cognito user pool.
	// +kubebuilder:validation:Required
	AuthorizationType *string `json:"authorizationType"`
	// Specifies the identifier of an Authorizer to use on this Method, if the type
	// is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by
	// API Gateway when you created the authorizer.
	AuthorizerID *string `json:"authorizerID,omitempty"`
	// Specifies the method request's HTTP method type.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod"`
	// A human-friendly operation identifier for the method. For example, you can
	// assign the operationName of ListPets for the GET /pets method in the PetStore
	// example.
	OperationName *string `json:"operationName,omitempty"`
	// Specifies the Model resources used for the request's content type. Request
	// models are represented as a key/value map, with a content type as the key
	// and a Model name as the value.
	RequestModels map[string]*string `json:"requestModels,omitempty"`
	// A key-value map defining required or optional method request parameters that
	// can be accepted by API Gateway. A key defines a method request parameter
	// name matching the pattern of method.request.{location}.{name}, where location
	// is querystring, path, or header and name is a valid and unique parameter
	// name. The value associated with the key is a Boolean flag indicating whether
	// the parameter is required (true) or optional (false). The method request
	// parameter names defined here are available in Integration to be mapped to
	// integration request parameters or body-mapping templates.
	RequestParameters map[string]*bool `json:"requestParameters,omitempty"`
	// The identifier of a RequestValidator for validating the method request.
	RequestValidatorID *string `json:"requestValidatorID,omitempty"`
	// The Resource identifier for the new Method resource.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	ResourceID  *string                                  `json:"resourceID,omitempty"`
	ResourceRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"resourceRef,omitempty"`
	// The string identifier of the associated RestApi.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	RestAPIID  *string                                  `json:"restAPIID,omitempty"`
	RestAPIRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"restAPIRef,omitempty"`
}

// MethodStatus defines the observed state of Method
type MethodStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Gets the method's integration responsible for passing the client-submitted
	// request to the back end and performing necessary transformations to make
	// the request compliant with the back end.
	// +kubebuilder:validation:Optional
	MethodIntegration *Integration_SDK `json:"methodIntegration,omitempty"`
	// Gets a method response associated with a given HTTP status code.
	// +kubebuilder:validation:Optional
	MethodResponses map[string]*MethodResponse `json:"methodResponses,omitempty"`
}

// Method is the Schema for the Methods API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Method struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MethodSpec   `json:"spec,omitempty"`
	Status            MethodStatus `json:"status,omitempty"`
}

// MethodList contains a list of Method
// +kubebuilder:object:root=true
type MethodList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Method `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Method{}, &MethodList{})
}
