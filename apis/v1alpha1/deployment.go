// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// DeploymentSpec defines the desired state of Deployment.
//
// An immutable representation of a RestApi resource that can be called by users
// using Stages. A deployment must be associated with a Stage for it to be callable
// over the Internet.
type DeploymentSpec struct {

	// Enables a cache cluster for the Stage resource specified in the input.
	CacheClusterEnabled *bool `json:"cacheClusterEnabled,omitempty"`
	// The stage's cache capacity in GB. For more information about choosing a cache
	// size, see Enabling API caching to enhance responsiveness (https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html).
	CacheClusterSize *string `json:"cacheClusterSize,omitempty"`
	// The input configuration for the canary deployment when the deployment is
	// a canary release deployment.
	CanarySettings *DeploymentCanarySettings `json:"canarySettings,omitempty"`
	// The description for the Deployment resource to create.
	Description *string `json:"description,omitempty"`
	// The string identifier of the associated RestApi.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	RestAPIID  *string                                  `json:"restAPIID,omitempty"`
	RestAPIRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"restAPIRef,omitempty"`
	// The description of the Stage resource for the Deployment resource to create.
	StageDescription *string `json:"stageDescription,omitempty"`
	// The name of the Stage resource for the Deployment resource to create.
	StageName *string `json:"stageName,omitempty"`
	// Specifies whether active tracing with X-ray is enabled for the Stage.
	TracingEnabled *bool `json:"tracingEnabled,omitempty"`
	// A map that defines the stage variables for the Stage resource that is associated
	// with the new deployment. Variable names can have alphanumeric and underscore
	// characters, and the values must match [A-Za-z0-9-._~:/?#&=,]+.
	Variables map[string]*string `json:"variables,omitempty"`
}

// DeploymentStatus defines the observed state of Deployment
type DeploymentStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// A summary of the RestApi at the date and time that the deployment resource
	// was created.
	// +kubebuilder:validation:Optional
	APISummary map[string]map[string]*MethodSnapshot `json:"apiSummary,omitempty"`
	// The date and time that the deployment resource was created.
	// +kubebuilder:validation:Optional
	CreatedDate *metav1.Time `json:"createdDate,omitempty"`
	// The identifier for the deployment resource.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty"`
}

// Deployment is the Schema for the Deployments API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Deployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeploymentSpec   `json:"spec,omitempty"`
	Status            DeploymentStatus `json:"status,omitempty"`
}

// DeploymentList contains a list of Deployment
// +kubebuilder:object:root=true
type DeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Deployment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Deployment{}, &DeploymentList{})
}
